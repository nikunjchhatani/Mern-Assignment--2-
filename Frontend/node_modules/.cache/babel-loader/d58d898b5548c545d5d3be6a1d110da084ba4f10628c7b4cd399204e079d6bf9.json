{"ast":null,"code":"var _jsxFileName = \"E:\\\\VSCODE\\\\Mern Assignment 2\\\\Frontend\\\\src\\\\pages\\\\PostDetailPage.js\",\n  _s = $RefreshSig$();\n// PostDetailPage.js\n\nimport React from 'react';\nimport { useParams } from 'react-router-dom';\nimport './PostDetailPage.css'; // Import custom CSS for styling\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PostDetailPage = () => {\n  _s();\n  const {\n    postId\n  } = useParams();\n\n  // Assuming you fetch post details based on postId from your backend or wherever you store post data\n  // For demonstration purposes, let's assume you have an array of posts\n  const posts = [{\n    id: 1,\n    content: 'Content for post 1...'\n  }, {\n    id: 2,\n    title: 'Post 2',\n    content: 'Content for post 2...'\n  }, {\n    id: 3,\n    title: 'Post 3',\n    content: 'Content for post 3...'\n  }\n  // Add more posts as needed\n  ];\n\n  // Find the post with the matching postId\n  const post = posts.find(post => post.id === parseInt(postId));\n  if (!post) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Post not found\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"post-detail-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"post-detail-title\",\n      children: post.title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"post-detail-content\",\n      children: post.content\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 5\n  }, this);\n};\n_s(PostDetailPage, \"zY00sTkH8LAD3YdIJE1pP6vQWzg=\", false, function () {\n  return [useParams];\n});\n_c = PostDetailPage;\nexport default PostDetailPage;\nvar _c;\n$RefreshReg$(_c, \"PostDetailPage\");","map":{"version":3,"names":["React","useParams","jsxDEV","_jsxDEV","PostDetailPage","_s","postId","posts","id","content","title","post","find","parseInt","children","fileName","_jsxFileName","lineNumber","columnNumber","className","_c","$RefreshReg$"],"sources":["E:/VSCODE/Mern Assignment 2/Frontend/src/pages/PostDetailPage.js"],"sourcesContent":["// PostDetailPage.js\r\n\r\nimport React from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport './PostDetailPage.css'; // Import custom CSS for styling\r\n\r\nconst PostDetailPage = () => {\r\n  const { postId } = useParams();\r\n\r\n  // Assuming you fetch post details based on postId from your backend or wherever you store post data\r\n  // For demonstration purposes, let's assume you have an array of posts\r\n  const posts = [\r\n    { id: 1, content: 'Content for post 1...' },\r\n    { id: 2, title: 'Post 2', content: 'Content for post 2...' },\r\n    { id: 3, title: 'Post 3', content: 'Content for post 3...' },\r\n    // Add more posts as needed\r\n  ];\r\n\r\n  // Find the post with the matching postId\r\n  const post = posts.find(post => post.id === parseInt(postId));\r\n\r\n  if (!post) {\r\n    return <div>Post not found</div>;\r\n  }\r\n\r\n  return (\r\n    <div className=\"post-detail-container\">\r\n      <h1 className=\"post-detail-title\">{post.title}</h1>\r\n      <p className=\"post-detail-content\">{post.content}</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PostDetailPage;\r\n"],"mappings":";;AAAA;;AAEA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,SAAS,QAAQ,kBAAkB;AAC5C,OAAO,sBAAsB,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAE/B,MAAMC,cAAc,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC3B,MAAM;IAAEC;EAAO,CAAC,GAAGL,SAAS,CAAC,CAAC;;EAE9B;EACA;EACA,MAAMM,KAAK,GAAG,CACZ;IAAEC,EAAE,EAAE,CAAC;IAAEC,OAAO,EAAE;EAAwB,CAAC,EAC3C;IAAED,EAAE,EAAE,CAAC;IAAEE,KAAK,EAAE,QAAQ;IAAED,OAAO,EAAE;EAAwB,CAAC,EAC5D;IAAED,EAAE,EAAE,CAAC;IAAEE,KAAK,EAAE,QAAQ;IAAED,OAAO,EAAE;EAAwB;EAC3D;EAAA,CACD;;EAED;EACA,MAAME,IAAI,GAAGJ,KAAK,CAACK,IAAI,CAACD,IAAI,IAAIA,IAAI,CAACH,EAAE,KAAKK,QAAQ,CAACP,MAAM,CAAC,CAAC;EAE7D,IAAI,CAACK,IAAI,EAAE;IACT,oBAAOR,OAAA;MAAAW,QAAA,EAAK;IAAc;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC;EAClC;EAEA,oBACEf,OAAA;IAAKgB,SAAS,EAAC,uBAAuB;IAAAL,QAAA,gBACpCX,OAAA;MAAIgB,SAAS,EAAC,mBAAmB;MAAAL,QAAA,EAAEH,IAAI,CAACD;IAAK;MAAAK,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,eACnDf,OAAA;MAAGgB,SAAS,EAAC,qBAAqB;MAAAL,QAAA,EAAEH,IAAI,CAACF;IAAO;MAAAM,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAClD,CAAC;AAEV,CAAC;AAACb,EAAA,CAzBID,cAAc;EAAA,QACCH,SAAS;AAAA;AAAAmB,EAAA,GADxBhB,cAAc;AA2BpB,eAAeA,cAAc;AAAC,IAAAgB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}